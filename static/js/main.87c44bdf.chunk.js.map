{"version":3,"sources":["Reducer/Reducer.js","Products/Products.js","CheckOut/CheckOut.js","App.js","serviceWorker.js","index.js"],"names":["initialState","products","id","v4","name","price","stock","counter","cart","reducer","state","action","type","addedProduct","find","product","newTotal","map","concat","addedCartProducts","filter","a","splice","length","connect","productList","dispatch","onAddItems","productId","props","pdct","key","style","listStyle","onClick","console","log","totalPrice","onClear","App","className","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.87c44bdf.chunk.js","sourcesContent":["import {v4} from 'uuid';\n\nconst initialState = {\n    products: [\n      { id: v4(), name: \"iPad Mini\", price: 500, stock: 2, counter: 0 },\n      { id: v4(), name: \"H&M T-Shirt White\", price: 10.99, stock: 10, counter: 0 },\n      {\n        id: v4(),\n        name: \"Charli XCX - Sucker CD\",\n        price: 19.99,\n        stock: 5,\n        counter: 0\n      }\n    ],\n    cart:[],\n    price:0\n  };\n  \n  const reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"ADD\":\n        let addedProduct = state.products.find(product => product.id=== action.id)\n        let newTotal = state.price + addedProduct.price\n        // console.log(addedProduct)\n        return {\n            ...state,\n            products:state.products.map(product => {\n            if(product.id === action.id&& product.stock >0) {\n                return {\n                ...product,\n                stock:product.stock -1,\n                counter:product.counter +1\n                };\n            }\n            return product\n            }),\n            cart:state.cart.concat(addedProduct),\n            price: newTotal\n        }\n        case \"RESET\":\n            let addedCartProducts = state.products.filter(a =>a.counter>0);\n            addedCartProducts.splice(0, state.cart.length)\n            return {\n                ...state,\n                products:state.products.map(product => ({...product, counter:0})),\n                cart: addedCartProducts,\n                price:0\n            }\n      case \"INCREASE\":\n        return {\n          ...state,\n          products: state.products.map(product => {\n            if (product.id === action.id&& product.counter < product.stock) {\n              return {\n                ...product,\n                counter: product.counter + 1\n              };\n            }\n            return product;\n          })\n        };\n      case \"DECREASE\":\n        return {\n          ...state,\n          products: state.products.map(product => {\n            if (product.id === action.id&& product.counter > 0) {\n              return {\n                ...product,\n                counter: product.counter - 1\n              };\n            }\n            return product;\n          })\n        };\n      default:\n        return state;\n    }\n  };\n  \n  export default reducer;","import React from 'react';\n// import {v4} from 'uuid';\nimport {connect} from 'react-redux';\n\n\nconst Products = props => {\n    // console.log(props)\n  return (\n    <div>\n      {props.productList.map(pdct => {\n        return (\n          <ul key={pdct.id} style={{listStyle:'none'}}>\n            <li>\n              <strong>Product Name:</strong> {pdct.name}\n            </li>\n            <li>\n              <strong>Product Price:</strong> {pdct.price}\n            </li>\n            <li>\n              <strong>Product Stock: </strong>\n              {pdct.stock}\n            </li>\n            {/* <button onClick={() =>props.onRemoveItems(pdct.id)}>-</button>\n            <span>{pdct.counter}</span>\n            <button onClick={() =>props.onAddItems(pdct.id)}>+</button> */}\n            <button onClick={pdct.stock>0? () => props.onAddItems(pdct.id) : null}>\n              {pdct.stock>0? ' Add to the cart' : 'Sold out'}\n            </button>\n          </ul>\n        );\n      })}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    productList: state.products\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n    // console.log(dispatch)\n  return {\n    onAddItems: productId => dispatch({ type: \"ADD\", id: productId }),\n    // onRemoveItems: productId => dispatch({ type: \"DECREASE\", id: productId })\n  };\n};\n\nexport default connect(\n  mapStateToProps, mapDispatchToProps\n)(Products);\n","import React from 'react';\nimport {v4} from 'uuid'\nimport {connect }from 'react-redux';\n\nconst CheckOut = props => {\n    console.log(props)\n    return (\n      <div>\n        <h5>Your Cart:{props.products.length === 0? 'Add some products' :\n            props.products.map(cart => {\n                return (\n                    <ul key={v4()} style={{listStyle:'none'}}>\n                        <li>{cart.name} {cart.counter}</li>\n                    </ul>\n                )\n            })\n        }</h5>\n        <h4>Total Price:{props.totalPrice}</h4>\n        <button onClick={() => props.onClear(props.products)}>Checkout</button>\n      </div>\n    );\n  };\n  \n  const mapStateToProps = state => {\n      console.log('state', state)\n    return {\n      totalPrice: state.price,\n    //   shoppingCart:state.cart\n    products: state.products.filter(a => a.counter >0)\n    };\n  };\n\n  const mapDispatchToProps = dispatch => {\n    //   console.log(dispatch)\n      return {\n          onClear :() => dispatch({type:\"RESET\"})\n      }\n  }\n  \n  export default connect(mapStateToProps,mapDispatchToProps)(CheckOut);\n","import React from 'react';\nimport './App.css';\nimport Products from './Products/Products';\nimport CheckOut from './CheckOut/CheckOut';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p>Redux Practice</p>\n      <Products />\n      <CheckOut />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './Reducer/Reducer';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}